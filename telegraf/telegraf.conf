[global_tags]

[agent]
interval = "15s"
round_interval = true
metric_batch_size = 1000
metric_buffer_limit = 10000
collection_jitter = "1s"
flush_interval = "10s"
flush_jitter = "1s"
precision = ""
quiet = false
debug = true

# logfile = "/var/log/telegraf/telegraf.log" 
# logfile_rotation_max_size = "50MB"
# logfile_rotation_max_archives = 2

[[outputs.influxdb_v2]]
  urls = ["http://influxdb:8086"]
  organization = "monitoring"
  bucket = "monitoring"
  token = "${TELEGRAF_TOKEN}"

# [[outputs.file]]
#   files = ["stdout"]

[[inputs.exec]]
  interval = "60s"
  commands = [
    "sh /etc/telegraf/ups-status.sh"
  ]
  data_format = "influx"

[[inputs.http]]
  # urls = ["http://genmon.local/cmd/status_num_json"]
  urls = [
    "http://172.20.49.117/cmd/status_num_json"
  ]
  data_format = "json_v2"

  tagexclude = ["url", "host"]

  [[inputs.http.json_v2]]
  measurement_name = "genmon"

  # All path expressions are in GJSON format: https://gjson.dev/
  [[inputs.http.json_v2.field]]
      path = "Status.#(Engine).Engine.#(Battery Voltage).Battery Voltage.value"
      type = "float"
      rename = "battery_volt"
  [[inputs.http.json_v2.field]]
      path = "Status.#(Engine).Engine.#(RPM).RPM.value"
      type = "int"
      rename = "rpm"
  [[inputs.http.json_v2.field]]
      path = "Status.#(Engine).Engine.#(Frequency).Frequency.value"
      type = "float"
      rename = "frequency"
  [[inputs.http.json_v2.field]]
      path = "Status.#(Engine).Engine.#(Output Voltage).Output Voltage.value"
      type = "int"
      rename = "output_volts"

  [[inputs.http.json_v2.field]]
      path = "Status.#(Engine).Engine.#(Output Current).Output Current.value"
      type = "float"
      rename = "output_curr"

  [[inputs.http.json_v2.field]]
      path = "Status.#(Engine).Engine.#(Current L1).Current L1.value"
      type = "float"
      rename = "output_curr_l1"

  [[inputs.http.json_v2.field]]
      path = "Status.#(Engine).Engine.#(Current L2).Current L2.value"
      type = "float"
      rename = "output_curr_l2"

  [[inputs.http.json_v2.field]]
      path = "Status.#(Engine).Engine.#(Output Power \\(Single Phase\\)).Output Power \\(Single Phase\\).value"
      type = "float"
      rename = "output_kwh"

  [[inputs.http.json_v2.field]]
      path = "Status.#(Engine).Engine.#(Active Rotor Poles \\(Calculated\\)).Active Rotor Poles \\(Calculated\\).value"
      type = "int"
      rename = "active_rotor_poles"

  [[inputs.http.json_v2.field]]
      path = "Status.#(Line).Line.#(Utility Voltage).Utility Voltage.value"
      type = "int"
      rename = "utility_volts"


# # Read metrics about cpu usage
[[inputs.cpu]]
  percpu = true
  totalcpu = true
  collect_cpu_time = false
  report_active = false


# # Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  mount_points = ["/"]

  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]


# Read metrics about disk IO by device
# [[inputs.diskio]]
#   devices = ["sda", "sdb", "nvme0n1*"]


# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration


# Read metrics about memory usage
[[inputs.mem]]
  # no configuration


# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration


# Read metrics about swap memory usage
[[inputs.swap]]
  # no configuration


# Read metrics about system load & uptime
[[inputs.system]]
  ## Uncomment to remove deprecated metrics.
  # fielddrop = ["uptime_format"]

# # Query given DNS server and gives statistics
[[inputs.ping]]
  method = "native"
  timeout = 2.0
  count = 2
  deadline = 5

  urls = ["172.20.0.1", "172.20.10.25", "8.8.8.8", "8.8.4.4", "1.1.1.1"]


# # Read metrics about docker containers
# [[inputs.docker]]
#   ## Docker Endpoint
#   ##   To use TCP, set endpoint = "tcp://[ip]:[port]"
#   ##   To use environment variables (ie, docker-machine), set endpoint = "ENV"
#   endpoint = "unix:///var/run/docker.sock"
#
#   ## Set to true to collect Swarm metrics(desired_replicas, running_replicas)
#   gather_services = false
#
#   ## Only collect metrics for these containers, collect all if empty
#   container_names = []
#
#   ## Set the source tag for the metrics to the container ID hostname, eg first 12 chars
#   source_tag = false
#
#   ## Containers to include and exclude. Globs accepted.
#   ## Note that an empty array for both will include all containers
#   container_name_include = []
#   container_name_exclude = []
#
#   ## Container states to include and exclude. Globs accepted.
#   ## When empty only containers in the "running" state will be captured.
#   ## example: container_state_include = ["created", "restarting", "running", "removing", "paused", "exited", "dead"]
#   ## example: container_state_exclude = ["created", "restarting", "running", "removing", "paused", "exited", "dead"]
#   # container_state_include = []
#   # container_state_exclude = []
#
#   ## Timeout for docker list, info, and stats commands
#   timeout = "5s"
#
#   ## Whether to report for each container per-device blkio (8:0, 8:1...) and
#   ## network (eth0, eth1, ...) stats or not
#   perdevice = true
#
#   ## Whether to report for each container total blkio and network stats or not
#   total = false
#
#   ## Which environment variables should we use as a tag
#   ##tag_env = ["JAVA_HOME", "HEAP_SIZE"]
#
#   ## docker labels to include and exclude as tags.  Globs accepted.
#   ## Note that an empty array for both will include all labels as tags
#   docker_label_include = []
#   docker_label_exclude = []
#
#   ## Optional TLS Config
#   # tls_ca = "/etc/telegraf/ca.pem"
#   # tls_cert = "/etc/telegraf/cert.pem"
#   # tls_key = "/etc/telegraf/key.pem"
#   ## Use TLS but skip chain & host verification
#   # insecure_skip_verify = false
